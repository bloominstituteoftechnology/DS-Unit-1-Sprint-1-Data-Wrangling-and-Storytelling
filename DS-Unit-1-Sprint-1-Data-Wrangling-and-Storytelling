{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "111 Assignment",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/reidharris01/DS-Unit-1-Sprint-1-Data-Wrangling-and-Storytelling/blob/master/DS-Unit-1-Sprint-1-Data-Wrangling-and-Storytelling\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "MSnsTgZLKO72"
      },
      "source": [
        "# Practice Loading and Exploring Datasets\n",
        "\n",
        "This assignment is purposely open-ended. You will be asked to load datasets from the [UC-Irvine Machine Learning Repository](https://archive.ics.uci.edu/ml/index.php). \n",
        "\n",
        "Even though you maybe using different datasets than your fellow classmates, try and be supportive and assist each other in the challenges that you are facing. You will only deepend your understanding of these topics as you work to assist one another. Many popular UCI datasets face similar data loading challenges.\n",
        "\n",
        "Remember that the UCI datasets do not necessarily have a file type of `.csv` so it's important that you learn as much as you can about the dataset before you try and load it. See if you can look at the raw text of the file either locally or using the `!curl` shell command -or in some other way before you try and read it in as a dataframe. This will help you catch what would otherwise be unforseen problems.\n",
        "\n",
        "Feel free to embellish this notebook with additional markdown cells,code cells, comments, graphs, etc. Whatever you think helps adequately address the questions."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "156P6ndeKojO",
        "colab_type": "text"
      },
      "source": [
        "## 1) Load a dataset from UCI (via its URL)\n",
        "\n",
        "Please navigate to the home page and choose a dataset (other than the Adult dataset) from the \"Most Popular\" section on the right-hand side of the home page. Load the dataset via its URL and check the following (show your work):\n",
        "\n",
        "- Are the headers showing up properly?\n",
        "- Look at the first 5 and the last 5 rows, do they seem to be in order?\n",
        "- Does the dataset have the correct number of rows and columns as described in the UCI page? \n",
        " - Remember, that UCI does not count the y variable (column of values that we might want to predict via a machine learning model) as an \"attribute\" but rather as a \"class attribute\" so you may end up seeing a number of columns that is one greater than the number listed on the UCI website.\n",
        "- Does UCI list this dataset as having missing values? Check for missing values and see if your analysis corroborates what UCI reports?\n",
        "- if `NaN` values or other missing value indicators are not being detected by `df.isnull().sum()` find a way to replace whatever is indicating the missing values with `np.NaN`.\n",
        "- Use the .describe() function in order to see the summary statistics of both the numeric and non-numeric columns. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NJdISe69ZT7E",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "c2c0003b-676c-4eb8-a812-8e0597f22a52"
      },
      "source": [
        "wine_data_url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data'\n",
        "\n",
        "!curl https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1,14.23,1.71,2.43,15.6,127,2.8,3.06,.28,2.29,5.64,1.04,3.92,1065\n",
            "1,13.2,1.78,2.14,11.2,100,2.65,2.76,.26,1.28,4.38,1.05,3.4,1050\n",
            "1,13.16,2.36,2.67,18.6,101,2.8,3.24,.3,2.81,5.68,1.03,3.17,1185\n",
            "1,14.37,1.95,2.5,16.8,113,3.85,3.49,.24,2.18,7.8,.86,3.45,1480\n",
            "1,13.24,2.59,2.87,21,118,2.8,2.69,.39,1.82,4.32,1.04,2.93,735\n",
            "1,14.2,1.76,2.45,15.2,112,3.27,3.39,.34,1.97,6.75,1.05,2.85,1450\n",
            "1,14.39,1.87,2.45,14.6,96,2.5,2.52,.3,1.98,5.25,1.02,3.58,1290\n",
            "1,14.06,2.15,2.61,17.6,121,2.6,2.51,.31,1.25,5.05,1.06,3.58,1295\n",
            "1,14.83,1.64,2.17,14,97,2.8,2.98,.29,1.98,5.2,1.08,2.85,1045\n",
            "1,13.86,1.35,2.27,16,98,2.98,3.15,.22,1.85,7.22,1.01,3.55,1045\n",
            "1,14.1,2.16,2.3,18,105,2.95,3.32,.22,2.38,5.75,1.25,3.17,1510\n",
            "1,14.12,1.48,2.32,16.8,95,2.2,2.43,.26,1.57,5,1.17,2.82,1280\n",
            "1,13.75,1.73,2.41,16,89,2.6,2.76,.29,1.81,5.6,1.15,2.9,1320\n",
            "1,14.75,1.73,2.39,11.4,91,3.1,3.69,.43,2.81,5.4,1.25,2.73,1150\n",
            "1,14.38,1.87,2.38,12,102,3.3,3.64,.29,2.96,7.5,1.2,3,1547\n",
            "1,13.63,1.81,2.7,17.2,112,2.85,2.91,.3,1.46,7.3,1.28,2.88,1310\n",
            "1,14.3,1.92,2.72,20,120,2.8,3.14,.33,1.97,6.2,1.07,2.65,1280\n",
            "1,13.83,1.57,2.62,20,115,2.95,3.4,.4,1.72,6.6,1.13,2.57,1130\n",
            "1,14.19,1.59,2.48,16.5,108,3.3,3.93,.32,1.86,8.7,1.23,2.82,1680\n",
            "1,13.64,3.1,2.56,15.2,116,2.7,3.03,.17,1.66,5.1,.96,3.36,845\n",
            "1,14.06,1.63,2.28,16,126,3,3.17,.24,2.1,5.65,1.09,3.71,780\n",
            "1,12.93,3.8,2.65,18.6,102,2.41,2.41,.25,1.98,4.5,1.03,3.52,770\n",
            "1,13.71,1.86,2.36,16.6,101,2.61,2.88,.27,1.69,3.8,1.11,4,1035\n",
            "1,12.85,1.6,2.52,17.8,95,2.48,2.37,.26,1.46,3.93,1.09,3.63,1015\n",
            "1,13.5,1.81,2.61,20,96,2.53,2.61,.28,1.66,3.52,1.12,3.82,845\n",
            "1,13.05,2.05,3.22,25,124,2.63,2.68,.47,1.92,3.58,1.13,3.2,830\n",
            "1,13.39,1.77,2.62,16.1,93,2.85,2.94,.34,1.45,4.8,.92,3.22,1195\n",
            "1,13.3,1.72,2.14,17,94,2.4,2.19,.27,1.35,3.95,1.02,2.77,1285\n",
            "1,13.87,1.9,2.8,19.4,107,2.95,2.97,.37,1.76,4.5,1.25,3.4,915\n",
            "1,14.02,1.68,2.21,16,96,2.65,2.33,.26,1.98,4.7,1.04,3.59,1035\n",
            "1,13.73,1.5,2.7,22.5,101,3,3.25,.29,2.38,5.7,1.19,2.71,1285\n",
            "1,13.58,1.66,2.36,19.1,106,2.86,3.19,.22,1.95,6.9,1.09,2.88,1515\n",
            "1,13.68,1.83,2.36,17.2,104,2.42,2.69,.42,1.97,3.84,1.23,2.87,990\n",
            "1,13.76,1.53,2.7,19.5,132,2.95,2.74,.5,1.35,5.4,1.25,3,1235\n",
            "1,13.51,1.8,2.65,19,110,2.35,2.53,.29,1.54,4.2,1.1,2.87,1095\n",
            "1,13.48,1.81,2.41,20.5,100,2.7,2.98,.26,1.86,5.1,1.04,3.47,920\n",
            "1,13.28,1.64,2.84,15.5,110,2.6,2.68,.34,1.36,4.6,1.09,2.78,880\n",
            "1,13.05,1.65,2.55,18,98,2.45,2.43,.29,1.44,4.25,1.12,2.51,1105\n",
            "1,13.07,1.5,2.1,15.5,98,2.4,2.64,.28,1.37,3.7,1.18,2.69,1020\n",
            "1,14.22,3.99,2.51,13.2,128,3,3.04,.2,2.08,5.1,.89,3.53,760\n",
            "1,13.56,1.71,2.31,16.2,117,3.15,3.29,.34,2.34,6.13,.95,3.38,795\n",
            "1,13.41,3.84,2.12,18.8,90,2.45,2.68,.27,1.48,4.28,.91,3,1035\n",
            "1,13.88,1.89,2.59,15,101,3.25,3.56,.17,1.7,5.43,.88,3.56,1095\n",
            "1,13.24,3.98,2.29,17.5,103,2.64,2.63,.32,1.66,4.36,.82,3,680\n",
            "1,13.05,1.77,2.1,17,107,3,3,.28,2.03,5.04,.88,3.35,885\n",
            "1,14.21,4.04,2.44,18.9,111,2.85,2.65,.3,1.25,5.24,.87,3.33,1080\n",
            "1,14.38,3.59,2.28,16,102,3.25,3.17,.27,2.19,4.9,1.04,3.44,1065\n",
            "1,13.9,1.68,2.12,16,101,3.1,3.39,.21,2.14,6.1,.91,3.33,985\n",
            "1,14.1,2.02,2.4,18.8,103,2.75,2.92,.32,2.38,6.2,1.07,2.75,1060\n",
            "1,13.94,1.73,2.27,17.4,108,2.88,3.54,.32,2.08,8.90,1.12,3.1,1260\n",
            "1,13.05,1.73,2.04,12.4,92,2.72,3.27,.17,2.91,7.2,1.12,2.91,1150\n",
            "1,13.83,1.65,2.6,17.2,94,2.45,2.99,.22,2.29,5.6,1.24,3.37,1265\n",
            "1,13.82,1.75,2.42,14,111,3.88,3.74,.32,1.87,7.05,1.01,3.26,1190\n",
            "1,13.77,1.9,2.68,17.1,115,3,2.79,.39,1.68,6.3,1.13,2.93,1375\n",
            "1,13.74,1.67,2.25,16.4,118,2.6,2.9,.21,1.62,5.85,.92,3.2,1060\n",
            "1,13.56,1.73,2.46,20.5,116,2.96,2.78,.2,2.45,6.25,.98,3.03,1120\n",
            "1,14.22,1.7,2.3,16.3,118,3.2,3,.26,2.03,6.38,.94,3.31,970\n",
            "1,13.29,1.97,2.68,16.8,102,3,3.23,.31,1.66,6,1.07,2.84,1270\n",
            "1,13.72,1.43,2.5,16.7,108,3.4,3.67,.19,2.04,6.8,.89,2.87,1285\n",
            "2,12.37,.94,1.36,10.6,88,1.98,.57,.28,.42,1.95,1.05,1.82,520\n",
            "2,12.33,1.1,2.28,16,101,2.05,1.09,.63,.41,3.27,1.25,1.67,680\n",
            "2,12.64,1.36,2.02,16.8,100,2.02,1.41,.53,.62,5.75,.98,1.59,450\n",
            "2,13.67,1.25,1.92,18,94,2.1,1.79,.32,.73,3.8,1.23,2.46,630\n",
            "2,12.37,1.13,2.16,19,87,3.5,3.1,.19,1.87,4.45,1.22,2.87,420\n",
            "2,12.17,1.45,2.53,19,104,1.89,1.75,.45,1.03,2.95,1.45,2.23,355\n",
            "2,12.37,1.21,2.56,18.1,98,2.42,2.65,.37,2.08,4.6,1.19,2.3,678\n",
            "2,13.11,1.01,1.7,15,78,2.98,3.18,.26,2.28,5.3,1.12,3.18,502\n",
            "2,12.37,1.17,1.92,19.6,78,2.11,2,.27,1.04,4.68,1.12,3.48,510\n",
            "2,13.34,.94,2.36,17,110,2.53,1.3,.55,.42,3.17,1.02,1.93,750\n",
            "2,12.21,1.19,1.75,16.8,151,1.85,1.28,.14,2.5,2.85,1.28,3.07,718\n",
            "2,12.29,1.61,2.21,20.4,103,1.1,1.02,.37,1.46,3.05,.906,1.82,870\n",
            "2,13.86,1.51,2.67,25,86,2.95,2.86,.21,1.87,3.38,1.36,3.16,410\n",
            "2,13.49,1.66,2.24,24,87,1.88,1.84,.27,1.03,3.74,.98,2.78,472\n",
            "2,12.99,1.67,2.6,30,139,3.3,2.89,.21,1.96,3.35,1.31,3.5,985\n",
            "2,11.96,1.09,2.3,21,101,3.38,2.14,.13,1.65,3.21,.99,3.13,886\n",
            "2,11.66,1.88,1.92,16,97,1.61,1.57,.34,1.15,3.8,1.23,2.14,428\n",
            "2,13.03,.9,1.71,16,86,1.95,2.03,.24,1.46,4.6,1.19,2.48,392\n",
            "2,11.84,2.89,2.23,18,112,1.72,1.32,.43,.95,2.65,.96,2.52,500\n",
            "2,12.33,.99,1.95,14.8,136,1.9,1.85,.35,2.76,3.4,1.06,2.31,750\n",
            "2,12.7,3.87,2.4,23,101,2.83,2.55,.43,1.95,2.57,1.19,3.13,463\n",
            "2,12,.92,2,19,86,2.42,2.26,.3,1.43,2.5,1.38,3.12,278\n",
            "2,12.72,1.81,2.2,18.8,86,2.2,2.53,.26,1.77,3.9,1.16,3.14,714\n",
            "2,12.08,1.13,2.51,24,78,2,1.58,.4,1.4,2.2,1.31,2.72,630\n",
            "2,13.05,3.86,2.32,22.5,85,1.65,1.59,.61,1.62,4.8,.84,2.01,515\n",
            "2,11.84,.89,2.58,18,94,2.2,2.21,.22,2.35,3.05,.79,3.08,520\n",
            "2,12.67,.98,2.24,18,99,2.2,1.94,.3,1.46,2.62,1.23,3.16,450\n",
            "2,12.16,1.61,2.31,22.8,90,1.78,1.69,.43,1.56,2.45,1.33,2.26,495\n",
            "2,11.65,1.67,2.62,26,88,1.92,1.61,.4,1.34,2.6,1.36,3.21,562\n",
            "2,11.64,2.06,2.46,21.6,84,1.95,1.69,.48,1.35,2.8,1,2.75,680\n",
            "2,12.08,1.33,2.3,23.6,70,2.2,1.59,.42,1.38,1.74,1.07,3.21,625\n",
            "2,12.08,1.83,2.32,18.5,81,1.6,1.5,.52,1.64,2.4,1.08,2.27,480\n",
            "2,12,1.51,2.42,22,86,1.45,1.25,.5,1.63,3.6,1.05,2.65,450\n",
            "2,12.69,1.53,2.26,20.7,80,1.38,1.46,.58,1.62,3.05,.96,2.06,495\n",
            "2,12.29,2.83,2.22,18,88,2.45,2.25,.25,1.99,2.15,1.15,3.3,290\n",
            "2,11.62,1.99,2.28,18,98,3.02,2.26,.17,1.35,3.25,1.16,2.96,345\n",
            "2,12.47,1.52,2.2,19,162,2.5,2.27,.32,3.28,2.6,1.16,2.63,937\n",
            "2,11.81,2.12,2.74,21.5,134,1.6,.99,.14,1.56,2.5,.95,2.26,625\n",
            "2,12.29,1.41,1.98,16,85,2.55,2.5,.29,1.77,2.9,1.23,2.74,428\n",
            "2,12.37,1.07,2.1,18.5,88,3.52,3.75,.24,1.95,4.5,1.04,2.77,660\n",
            "2,12.29,3.17,2.21,18,88,2.85,2.99,.45,2.81,2.3,1.42,2.83,406\n",
            "2,12.08,2.08,1.7,17.5,97,2.23,2.17,.26,1.4,3.3,1.27,2.96,710\n",
            "2,12.6,1.34,1.9,18.5,88,1.45,1.36,.29,1.35,2.45,1.04,2.77,562\n",
            "2,12.34,2.45,2.46,21,98,2.56,2.11,.34,1.31,2.8,.8,3.38,438\n",
            "2,11.82,1.72,1.88,19.5,86,2.5,1.64,.37,1.42,2.06,.94,2.44,415\n",
            "2,12.51,1.73,1.98,20.5,85,2.2,1.92,.32,1.48,2.94,1.04,3.57,672\n",
            "2,12.42,2.55,2.27,22,90,1.68,1.84,.66,1.42,2.7,.86,3.3,315\n",
            "2,12.25,1.73,2.12,19,80,1.65,2.03,.37,1.63,3.4,1,3.17,510\n",
            "2,12.72,1.75,2.28,22.5,84,1.38,1.76,.48,1.63,3.3,.88,2.42,488\n",
            "2,12.22,1.29,1.94,19,92,2.36,2.04,.39,2.08,2.7,.86,3.02,312\n",
            "2,11.61,1.35,2.7,20,94,2.74,2.92,.29,2.49,2.65,.96,3.26,680\n",
            "2,11.46,3.74,1.82,19.5,107,3.18,2.58,.24,3.58,2.9,.75,2.81,562\n",
            "2,12.52,2.43,2.17,21,88,2.55,2.27,.26,1.22,2,.9,2.78,325\n",
            "2,11.76,2.68,2.92,20,103,1.75,2.03,.6,1.05,3.8,1.23,2.5,607\n",
            "2,11.41,.74,2.5,21,88,2.48,2.01,.42,1.44,3.08,1.1,2.31,434\n",
            "2,12.08,1.39,2.5,22.5,84,2.56,2.29,.43,1.04,2.9,.93,3.19,385\n",
            "2,11.03,1.51,2.2,21.5,85,2.46,2.17,.52,2.01,1.9,1.71,2.87,407\n",
            "2,11.82,1.47,1.99,20.8,86,1.98,1.6,.3,1.53,1.95,.95,3.33,495\n",
            "2,12.42,1.61,2.19,22.5,108,2,2.09,.34,1.61,2.06,1.06,2.96,345\n",
            "2,12.77,3.43,1.98,16,80,1.63,1.25,.43,.83,3.4,.7,2.12,372\n",
            "2,12,3.43,2,19,87,2,1.64,.37,1.87,1.28,.93,3.05,564\n",
            "2,11.45,2.4,2.42,20,96,2.9,2.79,.32,1.83,3.25,.8,3.39,625\n",
            "2,11.56,2.05,3.23,28.5,119,3.18,5.08,.47,1.87,6,.93,3.69,465\n",
            "2,12.42,4.43,2.73,26.5,102,2.2,2.13,.43,1.71,2.08,.92,3.12,365\n",
            "2,13.05,5.8,2.13,21.5,86,2.62,2.65,.3,2.01,2.6,.73,3.1,380\n",
            "2,11.87,4.31,2.39,21,82,2.86,3.03,.21,2.91,2.8,.75,3.64,380\n",
            "2,12.07,2.16,2.17,21,85,2.6,2.65,.37,1.35,2.76,.86,3.28,378\n",
            "2,12.43,1.53,2.29,21.5,86,2.74,3.15,.39,1.77,3.94,.69,2.84,352\n",
            "2,11.79,2.13,2.78,28.5,92,2.13,2.24,.58,1.76,3,.97,2.44,466\n",
            "2,12.37,1.63,2.3,24.5,88,2.22,2.45,.4,1.9,2.12,.89,2.78,342\n",
            "2,12.04,4.3,2.38,22,80,2.1,1.75,.42,1.35,2.6,.79,2.57,580\n",
            "3,12.86,1.35,2.32,18,122,1.51,1.25,.21,.94,4.1,.76,1.29,630\n",
            "3,12.88,2.99,2.4,20,104,1.3,1.22,.24,.83,5.4,.74,1.42,530\n",
            "3,12.81,2.31,2.4,24,98,1.15,1.09,.27,.83,5.7,.66,1.36,560\n",
            "3,12.7,3.55,2.36,21.5,106,1.7,1.2,.17,.84,5,.78,1.29,600\n",
            "3,12.51,1.24,2.25,17.5,85,2,.58,.6,1.25,5.45,.75,1.51,650\n",
            "3,12.6,2.46,2.2,18.5,94,1.62,.66,.63,.94,7.1,.73,1.58,695\n",
            "3,12.25,4.72,2.54,21,89,1.38,.47,.53,.8,3.85,.75,1.27,720\n",
            "3,12.53,5.51,2.64,25,96,1.79,.6,.63,1.1,5,.82,1.69,515\n",
            "3,13.49,3.59,2.19,19.5,88,1.62,.48,.58,.88,5.7,.81,1.82,580\n",
            "3,12.84,2.96,2.61,24,101,2.32,.6,.53,.81,4.92,.89,2.15,590\n",
            "3,12.93,2.81,2.7,21,96,1.54,.5,.53,.75,4.6,.77,2.31,600\n",
            "3,13.36,2.56,2.35,20,89,1.4,.5,.37,.64,5.6,.7,2.47,780\n",
            "3,13.52,3.17,2.72,23.5,97,1.55,.52,.5,.55,4.35,.89,2.06,520\n",
            "3,13.62,4.95,2.35,20,92,2,.8,.47,1.02,4.4,.91,2.05,550\n",
            "3,12.25,3.88,2.2,18.5,112,1.38,.78,.29,1.14,8.21,.65,2,855\n",
            "3,13.16,3.57,2.15,21,102,1.5,.55,.43,1.3,4,.6,1.68,830\n",
            "3,13.88,5.04,2.23,20,80,.98,.34,.4,.68,4.9,.58,1.33,415\n",
            "3,12.87,4.61,2.48,21.5,86,1.7,.65,.47,.86,7.65,.54,1.86,625\n",
            "3,13.32,3.24,2.38,21.5,92,1.93,.76,.45,1.25,8.42,.55,1.62,650\n",
            "3,13.08,3.9,2.36,21.5,113,1.41,1.39,.34,1.14,9.40,.57,1.33,550\n",
            "3,13.5,3.12,2.62,24,123,1.4,1.57,.22,1.25,8.60,.59,1.3,500\n",
            "3,12.79,2.67,2.48,22,112,1.48,1.36,.24,1.26,10.8,.48,1.47,480\n",
            "3,13.11,1.9,2.75,25.5,116,2.2,1.28,.26,1.56,7.1,.61,1.33,425\n",
            "3,13.23,3.3,2.28,18.5,98,1.8,.83,.61,1.87,10.52,.56,1.51,675\n",
            "3,12.58,1.29,2.1,20,103,1.48,.58,.53,1.4,7.6,.58,1.55,640\n",
            "3,13.17,5.19,2.32,22,93,1.74,.63,.61,1.55,7.9,.6,1.48,725\n",
            "3,13.84,4.12,2.38,19.5,89,1.8,.83,.48,1.56,9.01,.57,1.64,480\n",
            "3,12.45,3.03,2.64,27,97,1.9,.58,.63,1.14,7.5,.67,1.73,880\n",
            "3,14.34,1.68,2.7,25,98,2.8,1.31,.53,2.7,13,.57,1.96,660\n",
            "3,13.48,1.67,2.64,22.5,89,2.6,1.1,.52,2.29,11.75,.57,1.78,620\n",
            "3,12.36,3.83,2.38,21,88,2.3,.92,.5,1.04,7.65,.56,1.58,520\n",
            "3,13.69,3.26,2.54,20,107,1.83,.56,.5,.8,5.88,.96,1.82,680\n",
            "3,12.85,3.27,2.58,22,106,1.65,.6,.6,.96,5.58,.87,2.11,570\n",
            "3,12.96,3.45,2.35,18.5,106,1.39,.7,.4,.94,5.28,.68,1.75,675\n",
            "3,13.78,2.76,2.3,22,90,1.35,.68,.41,1.03,9.58,.7,1.68,615\n",
            "3,13.73,4.36,2.26,22.5,88,1.28,.47,.52,1.15,6.62,.78,1.75,520\n",
            "3,13.45,3.7,2.6,23,111,1.7,.92,.43,1.46,10.68,.85,1.56,695\n",
            "3,12.82,3.37,2.3,19.5,88,1.48,.66,.4,.97,10.26,.72,1.75,685\n",
            "3,13.58,2.58,2.69,24.5,105,1.55,.84,.39,1.54,8.66,.74,1.8,750\n",
            "3,13.4,4.6,2.86,25,112,1.98,.96,.27,1.11,8.5,.67,1.92,630\n",
            "3,12.2,3.03,2.32,19,96,1.25,.49,.4,.73,5.5,.66,1.83,510\n",
            "3,12.77,2.39,2.28,19.5,86,1.39,.51,.48,.64,9.899999,.57,1.63,470\n",
            "3,14.16,2.51,2.48,20,91,1.68,.7,.44,1.24,9.7,.62,1.71,660\n",
            "3,13.71,5.65,2.45,20.5,95,1.68,.61,.52,1.06,7.7,.64,1.74,740\n",
            "3,13.4,3.91,2.48,23,102,1.8,.75,.43,1.41,7.3,.7,1.56,750\n",
            "3,13.27,4.28,2.26,20,120,1.59,.69,.43,1.35,10.2,.59,1.56,835\n",
            "3,13.17,2.59,2.37,20,120,1.65,.68,.53,1.46,9.3,.6,1.62,840\n",
            "3,14.13,4.1,2.74,24.5,96,2.05,.76,.56,1.35,9.2,.61,1.6,560\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jmBeQ7Iu7cXT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 271
        },
        "outputId": "b0028e92-9340-4948-f92d-543ce5dc1927"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "attributes = ['Alcohol','Malic acid', 'Ash', 'Alcalinity of ash','Magnesium','Total phenols','Flavanoids','Nonflavanoid phenols','Proanthocyanins','Color intensity',\n",
        "   'Hue','OD280/OD315 of diluted wines','Proline']\n",
        "\n",
        "df = pd.read_csv(wine_data_url,names=attributes)\n",
        "\n",
        "print(\"Number of instances = \",df.shape[0],\"\\nNumber of Attributes = \",df.shape[1] )\n",
        "df.head()"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of instances =  178 \n",
            "Number of Attributes =  13\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Alcohol</th>\n",
              "      <th>Malic acid</th>\n",
              "      <th>Ash</th>\n",
              "      <th>Alcalinity of ash</th>\n",
              "      <th>Magnesium</th>\n",
              "      <th>Total phenols</th>\n",
              "      <th>Flavanoids</th>\n",
              "      <th>Nonflavanoid phenols</th>\n",
              "      <th>Proanthocyanins</th>\n",
              "      <th>Color intensity</th>\n",
              "      <th>Hue</th>\n",
              "      <th>OD280/OD315 of diluted wines</th>\n",
              "      <th>Proline</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14.23</td>\n",
              "      <td>1.71</td>\n",
              "      <td>2.43</td>\n",
              "      <td>15.6</td>\n",
              "      <td>127</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.06</td>\n",
              "      <td>0.28</td>\n",
              "      <td>2.29</td>\n",
              "      <td>5.64</td>\n",
              "      <td>1.04</td>\n",
              "      <td>3.92</td>\n",
              "      <td>1065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13.20</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2.14</td>\n",
              "      <td>11.2</td>\n",
              "      <td>100</td>\n",
              "      <td>2.65</td>\n",
              "      <td>2.76</td>\n",
              "      <td>0.26</td>\n",
              "      <td>1.28</td>\n",
              "      <td>4.38</td>\n",
              "      <td>1.05</td>\n",
              "      <td>3.40</td>\n",
              "      <td>1050</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13.16</td>\n",
              "      <td>2.36</td>\n",
              "      <td>2.67</td>\n",
              "      <td>18.6</td>\n",
              "      <td>101</td>\n",
              "      <td>2.80</td>\n",
              "      <td>3.24</td>\n",
              "      <td>0.30</td>\n",
              "      <td>2.81</td>\n",
              "      <td>5.68</td>\n",
              "      <td>1.03</td>\n",
              "      <td>3.17</td>\n",
              "      <td>1185</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14.37</td>\n",
              "      <td>1.95</td>\n",
              "      <td>2.50</td>\n",
              "      <td>16.8</td>\n",
              "      <td>113</td>\n",
              "      <td>3.85</td>\n",
              "      <td>3.49</td>\n",
              "      <td>0.24</td>\n",
              "      <td>2.18</td>\n",
              "      <td>7.80</td>\n",
              "      <td>0.86</td>\n",
              "      <td>3.45</td>\n",
              "      <td>1480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>13.24</td>\n",
              "      <td>2.59</td>\n",
              "      <td>2.87</td>\n",
              "      <td>21.0</td>\n",
              "      <td>118</td>\n",
              "      <td>2.80</td>\n",
              "      <td>2.69</td>\n",
              "      <td>0.39</td>\n",
              "      <td>1.82</td>\n",
              "      <td>4.32</td>\n",
              "      <td>1.04</td>\n",
              "      <td>2.93</td>\n",
              "      <td>735</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Alcohol  Malic acid   Ash  ...   Hue  OD280/OD315 of diluted wines  Proline\n",
              "1    14.23        1.71  2.43  ...  1.04                          3.92     1065\n",
              "1    13.20        1.78  2.14  ...  1.05                          3.40     1050\n",
              "1    13.16        2.36  2.67  ...  1.03                          3.17     1185\n",
              "1    14.37        1.95  2.50  ...  0.86                          3.45     1480\n",
              "1    13.24        2.59  2.87  ...  1.04                          2.93      735\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uetfSh7q8x6s",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "outputId": "5de426c1-8ad0-46b3-cbbe-f38f946985cf"
      },
      "source": [
        "df.isnull().sum()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Alcohol                         0\n",
              "Malic acid                      0\n",
              "Ash                             0\n",
              "Alcalinity of ash               0\n",
              "Magnesium                       0\n",
              "Total phenols                   0\n",
              "Flavanoids                      0\n",
              "Nonflavanoid phenols            0\n",
              "Proanthocyanins                 0\n",
              "Color intensity                 0\n",
              "Hue                             0\n",
              "OD280/OD315 of diluted wines    0\n",
              "Proline                         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "55ebsrRD_Jul",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "outputId": "cecb49e1-36cb-4aed-adc3-c589ce217eb2"
      },
      "source": [
        "df.describe()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Alcohol</th>\n",
              "      <th>Malic acid</th>\n",
              "      <th>Ash</th>\n",
              "      <th>Alcalinity of ash</th>\n",
              "      <th>Magnesium</th>\n",
              "      <th>Total phenols</th>\n",
              "      <th>Flavanoids</th>\n",
              "      <th>Nonflavanoid phenols</th>\n",
              "      <th>Proanthocyanins</th>\n",
              "      <th>Color intensity</th>\n",
              "      <th>Hue</th>\n",
              "      <th>OD280/OD315 of diluted wines</th>\n",
              "      <th>Proline</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "      <td>178.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>13.000618</td>\n",
              "      <td>2.336348</td>\n",
              "      <td>2.366517</td>\n",
              "      <td>19.494944</td>\n",
              "      <td>99.741573</td>\n",
              "      <td>2.295112</td>\n",
              "      <td>2.029270</td>\n",
              "      <td>0.361854</td>\n",
              "      <td>1.590899</td>\n",
              "      <td>5.058090</td>\n",
              "      <td>0.957449</td>\n",
              "      <td>2.611685</td>\n",
              "      <td>746.893258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.811827</td>\n",
              "      <td>1.117146</td>\n",
              "      <td>0.274344</td>\n",
              "      <td>3.339564</td>\n",
              "      <td>14.282484</td>\n",
              "      <td>0.625851</td>\n",
              "      <td>0.998859</td>\n",
              "      <td>0.124453</td>\n",
              "      <td>0.572359</td>\n",
              "      <td>2.318286</td>\n",
              "      <td>0.228572</td>\n",
              "      <td>0.709990</td>\n",
              "      <td>314.907474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>11.030000</td>\n",
              "      <td>0.740000</td>\n",
              "      <td>1.360000</td>\n",
              "      <td>10.600000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>0.980000</td>\n",
              "      <td>0.340000</td>\n",
              "      <td>0.130000</td>\n",
              "      <td>0.410000</td>\n",
              "      <td>1.280000</td>\n",
              "      <td>0.480000</td>\n",
              "      <td>1.270000</td>\n",
              "      <td>278.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>12.362500</td>\n",
              "      <td>1.602500</td>\n",
              "      <td>2.210000</td>\n",
              "      <td>17.200000</td>\n",
              "      <td>88.000000</td>\n",
              "      <td>1.742500</td>\n",
              "      <td>1.205000</td>\n",
              "      <td>0.270000</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>3.220000</td>\n",
              "      <td>0.782500</td>\n",
              "      <td>1.937500</td>\n",
              "      <td>500.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>13.050000</td>\n",
              "      <td>1.865000</td>\n",
              "      <td>2.360000</td>\n",
              "      <td>19.500000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>2.355000</td>\n",
              "      <td>2.135000</td>\n",
              "      <td>0.340000</td>\n",
              "      <td>1.555000</td>\n",
              "      <td>4.690000</td>\n",
              "      <td>0.965000</td>\n",
              "      <td>2.780000</td>\n",
              "      <td>673.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>13.677500</td>\n",
              "      <td>3.082500</td>\n",
              "      <td>2.557500</td>\n",
              "      <td>21.500000</td>\n",
              "      <td>107.000000</td>\n",
              "      <td>2.800000</td>\n",
              "      <td>2.875000</td>\n",
              "      <td>0.437500</td>\n",
              "      <td>1.950000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>1.120000</td>\n",
              "      <td>3.170000</td>\n",
              "      <td>985.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>14.830000</td>\n",
              "      <td>5.800000</td>\n",
              "      <td>3.230000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>162.000000</td>\n",
              "      <td>3.880000</td>\n",
              "      <td>5.080000</td>\n",
              "      <td>0.660000</td>\n",
              "      <td>3.580000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>1.710000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1680.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          Alcohol  Malic acid  ...  OD280/OD315 of diluted wines      Proline\n",
              "count  178.000000  178.000000  ...                    178.000000   178.000000\n",
              "mean    13.000618    2.336348  ...                      2.611685   746.893258\n",
              "std      0.811827    1.117146  ...                      0.709990   314.907474\n",
              "min     11.030000    0.740000  ...                      1.270000   278.000000\n",
              "25%     12.362500    1.602500  ...                      1.937500   500.500000\n",
              "50%     13.050000    1.865000  ...                      2.780000   673.500000\n",
              "75%     13.677500    3.082500  ...                      3.170000   985.000000\n",
              "max     14.830000    5.800000  ...                      4.000000  1680.000000\n",
              "\n",
              "[8 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wKDE8PJB_r5H",
        "colab_type": "text"
      },
      "source": [
        "# ***There were no headers, so I added them.  Yes, they are ordered by cultivar.  The number of rows matches UCI's description (178).  No missing values.***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-gFnZR6iLLPY",
        "colab_type": "text"
      },
      "source": [
        "## 2) Load a dataset from your local machine.\n",
        "Choose a second dataset from the \"Popular Datasets\" listing on UCI, but this time download it to your local machine instead of reading it in via the URL. Upload the file to Google Colab using the files tab in the left-hand sidebar or by importing `files` from `google.colab` The following link will be a useful resource if you can't remember the syntax: <https://towardsdatascience.com/3-ways-to-load-csv-files-into-colab-7c14fcbdcb92>\n",
        "\n",
        "- Answer all of the same bullet point questions from part 1 again on this new dataset. \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qUmwX-ZoM9cq",
        "colab_type": "code",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "outputId": "ae9a954d-2579-4755-9b4f-c505c2830282"
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f5bb3925-8370-4d28-a736-88c0f289ecd6\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f5bb3925-8370-4d28-a736-88c0f289ecd6\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving winequality-red.csv to winequality-red (1).csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "29Hj5cMEAM4w",
        "colab_type": "code",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "outputId": "7ba6d5b4-b464-47d7-8636-c5cd5c7c8afc"
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-be4b3010-708b-4da7-8551-47f3b0aa9f1c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-be4b3010-708b-4da7-8551-47f3b0aa9f1c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving winequality-white.csv to winequality-white (1).csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R1hWcL_mAZMV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "outputId": "22892c78-c9c9-4d0c-f012-09f488a09c88"
      },
      "source": [
        "df_red = pd.read_csv('winequality-red.csv', sep=';')\n",
        "print(\"Total number of instances = \",df_red.shape[0])\n",
        "df_red.head()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total number of instances =  1599\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>0.098</td>\n",
              "      <td>25.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.9968</td>\n",
              "      <td>3.20</td>\n",
              "      <td>0.68</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7.8</td>\n",
              "      <td>0.76</td>\n",
              "      <td>0.04</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0.092</td>\n",
              "      <td>15.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.9970</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.65</td>\n",
              "      <td>9.8</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>11.2</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.075</td>\n",
              "      <td>17.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.9980</td>\n",
              "      <td>3.16</td>\n",
              "      <td>0.58</td>\n",
              "      <td>9.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>0.70</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>0.076</td>\n",
              "      <td>11.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.9978</td>\n",
              "      <td>3.51</td>\n",
              "      <td>0.56</td>\n",
              "      <td>9.4</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   fixed acidity  volatile acidity  citric acid  ...  sulphates  alcohol  quality\n",
              "0            7.4              0.70         0.00  ...       0.56      9.4        5\n",
              "1            7.8              0.88         0.00  ...       0.68      9.8        5\n",
              "2            7.8              0.76         0.04  ...       0.65      9.8        5\n",
              "3           11.2              0.28         0.56  ...       0.58      9.8        6\n",
              "4            7.4              0.70         0.00  ...       0.56      9.4        5\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ccWhZdE9CMn4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "outputId": "fb208301-2786-476f-be06-a69b067a7f43"
      },
      "source": [
        "df_red.describe()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "      <td>1599.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>8.319637</td>\n",
              "      <td>0.527821</td>\n",
              "      <td>0.270976</td>\n",
              "      <td>2.538806</td>\n",
              "      <td>0.087467</td>\n",
              "      <td>15.874922</td>\n",
              "      <td>46.467792</td>\n",
              "      <td>0.996747</td>\n",
              "      <td>3.311113</td>\n",
              "      <td>0.658149</td>\n",
              "      <td>10.422983</td>\n",
              "      <td>5.636023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.741096</td>\n",
              "      <td>0.179060</td>\n",
              "      <td>0.194801</td>\n",
              "      <td>1.409928</td>\n",
              "      <td>0.047065</td>\n",
              "      <td>10.460157</td>\n",
              "      <td>32.895324</td>\n",
              "      <td>0.001887</td>\n",
              "      <td>0.154386</td>\n",
              "      <td>0.169507</td>\n",
              "      <td>1.065668</td>\n",
              "      <td>0.807569</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>4.600000</td>\n",
              "      <td>0.120000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.900000</td>\n",
              "      <td>0.012000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.990070</td>\n",
              "      <td>2.740000</td>\n",
              "      <td>0.330000</td>\n",
              "      <td>8.400000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.100000</td>\n",
              "      <td>0.390000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>1.900000</td>\n",
              "      <td>0.070000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>0.995600</td>\n",
              "      <td>3.210000</td>\n",
              "      <td>0.550000</td>\n",
              "      <td>9.500000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.900000</td>\n",
              "      <td>0.520000</td>\n",
              "      <td>0.260000</td>\n",
              "      <td>2.200000</td>\n",
              "      <td>0.079000</td>\n",
              "      <td>14.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>0.996750</td>\n",
              "      <td>3.310000</td>\n",
              "      <td>0.620000</td>\n",
              "      <td>10.200000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>9.200000</td>\n",
              "      <td>0.640000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>2.600000</td>\n",
              "      <td>0.090000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>0.997835</td>\n",
              "      <td>3.400000</td>\n",
              "      <td>0.730000</td>\n",
              "      <td>11.100000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>15.900000</td>\n",
              "      <td>1.580000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>15.500000</td>\n",
              "      <td>0.611000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>289.000000</td>\n",
              "      <td>1.003690</td>\n",
              "      <td>4.010000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>14.900000</td>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       fixed acidity  volatile acidity  ...      alcohol      quality\n",
              "count    1599.000000       1599.000000  ...  1599.000000  1599.000000\n",
              "mean        8.319637          0.527821  ...    10.422983     5.636023\n",
              "std         1.741096          0.179060  ...     1.065668     0.807569\n",
              "min         4.600000          0.120000  ...     8.400000     3.000000\n",
              "25%         7.100000          0.390000  ...     9.500000     5.000000\n",
              "50%         7.900000          0.520000  ...    10.200000     6.000000\n",
              "75%         9.200000          0.640000  ...    11.100000     6.000000\n",
              "max        15.900000          1.580000  ...    14.900000     8.000000\n",
              "\n",
              "[8 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "goBJMZ0aCMQE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "outputId": "f17ab74b-e332-484d-e9ab-59b473b16fab"
      },
      "source": [
        "df_red.isnull().sum()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "fixed acidity           0\n",
              "volatile acidity        0\n",
              "citric acid             0\n",
              "residual sugar          0\n",
              "chlorides               0\n",
              "free sulfur dioxide     0\n",
              "total sulfur dioxide    0\n",
              "density                 0\n",
              "pH                      0\n",
              "sulphates               0\n",
              "alcohol                 0\n",
              "quality                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5c-V01CbAZvI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "outputId": "ea44b58e-c28b-4ab3-b8f4-7ab79fb30e5c"
      },
      "source": [
        "df_white = pd.read_csv('winequality-white.csv', sep=';')\n",
        "print(\"Number of instances = \",df_white.shape[0],\"\\nNumber of Attributes = \",df_white.shape[1] )\n",
        "df_white.head()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of instances =  4898 \n",
            "Number of Attributes =  12\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.0</td>\n",
              "      <td>0.27</td>\n",
              "      <td>0.36</td>\n",
              "      <td>20.7</td>\n",
              "      <td>0.045</td>\n",
              "      <td>45.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>1.0010</td>\n",
              "      <td>3.00</td>\n",
              "      <td>0.45</td>\n",
              "      <td>8.8</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6.3</td>\n",
              "      <td>0.30</td>\n",
              "      <td>0.34</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.049</td>\n",
              "      <td>14.0</td>\n",
              "      <td>132.0</td>\n",
              "      <td>0.9940</td>\n",
              "      <td>3.30</td>\n",
              "      <td>0.49</td>\n",
              "      <td>9.5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8.1</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.40</td>\n",
              "      <td>6.9</td>\n",
              "      <td>0.050</td>\n",
              "      <td>30.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.9951</td>\n",
              "      <td>3.26</td>\n",
              "      <td>0.44</td>\n",
              "      <td>10.1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.2</td>\n",
              "      <td>0.23</td>\n",
              "      <td>0.32</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0.058</td>\n",
              "      <td>47.0</td>\n",
              "      <td>186.0</td>\n",
              "      <td>0.9956</td>\n",
              "      <td>3.19</td>\n",
              "      <td>0.40</td>\n",
              "      <td>9.9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.2</td>\n",
              "      <td>0.23</td>\n",
              "      <td>0.32</td>\n",
              "      <td>8.5</td>\n",
              "      <td>0.058</td>\n",
              "      <td>47.0</td>\n",
              "      <td>186.0</td>\n",
              "      <td>0.9956</td>\n",
              "      <td>3.19</td>\n",
              "      <td>0.40</td>\n",
              "      <td>9.9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   fixed acidity  volatile acidity  citric acid  ...  sulphates  alcohol  quality\n",
              "0            7.0              0.27         0.36  ...       0.45      8.8        6\n",
              "1            6.3              0.30         0.34  ...       0.49      9.5        6\n",
              "2            8.1              0.28         0.40  ...       0.44     10.1        6\n",
              "3            7.2              0.23         0.32  ...       0.40      9.9        6\n",
              "4            7.2              0.23         0.32  ...       0.40      9.9        6\n",
              "\n",
              "[5 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h9WISwwuAaEO",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "outputId": "0ea5c93f-f4ba-40a4-b4cf-fce57c10f4b4"
      },
      "source": [
        "df_white.describe()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>fixed acidity</th>\n",
              "      <th>volatile acidity</th>\n",
              "      <th>citric acid</th>\n",
              "      <th>residual sugar</th>\n",
              "      <th>chlorides</th>\n",
              "      <th>free sulfur dioxide</th>\n",
              "      <th>total sulfur dioxide</th>\n",
              "      <th>density</th>\n",
              "      <th>pH</th>\n",
              "      <th>sulphates</th>\n",
              "      <th>alcohol</th>\n",
              "      <th>quality</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "      <td>4898.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>6.854788</td>\n",
              "      <td>0.278241</td>\n",
              "      <td>0.334192</td>\n",
              "      <td>6.391415</td>\n",
              "      <td>0.045772</td>\n",
              "      <td>35.308085</td>\n",
              "      <td>138.360657</td>\n",
              "      <td>0.994027</td>\n",
              "      <td>3.188267</td>\n",
              "      <td>0.489847</td>\n",
              "      <td>10.514267</td>\n",
              "      <td>5.877909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.843868</td>\n",
              "      <td>0.100795</td>\n",
              "      <td>0.121020</td>\n",
              "      <td>5.072058</td>\n",
              "      <td>0.021848</td>\n",
              "      <td>17.007137</td>\n",
              "      <td>42.498065</td>\n",
              "      <td>0.002991</td>\n",
              "      <td>0.151001</td>\n",
              "      <td>0.114126</td>\n",
              "      <td>1.230621</td>\n",
              "      <td>0.885639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>3.800000</td>\n",
              "      <td>0.080000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.009000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.987110</td>\n",
              "      <td>2.720000</td>\n",
              "      <td>0.220000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>6.300000</td>\n",
              "      <td>0.210000</td>\n",
              "      <td>0.270000</td>\n",
              "      <td>1.700000</td>\n",
              "      <td>0.036000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>108.000000</td>\n",
              "      <td>0.991723</td>\n",
              "      <td>3.090000</td>\n",
              "      <td>0.410000</td>\n",
              "      <td>9.500000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>6.800000</td>\n",
              "      <td>0.260000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>5.200000</td>\n",
              "      <td>0.043000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>134.000000</td>\n",
              "      <td>0.993740</td>\n",
              "      <td>3.180000</td>\n",
              "      <td>0.470000</td>\n",
              "      <td>10.400000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.300000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>0.390000</td>\n",
              "      <td>9.900000</td>\n",
              "      <td>0.050000</td>\n",
              "      <td>46.000000</td>\n",
              "      <td>167.000000</td>\n",
              "      <td>0.996100</td>\n",
              "      <td>3.280000</td>\n",
              "      <td>0.550000</td>\n",
              "      <td>11.400000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>14.200000</td>\n",
              "      <td>1.100000</td>\n",
              "      <td>1.660000</td>\n",
              "      <td>65.800000</td>\n",
              "      <td>0.346000</td>\n",
              "      <td>289.000000</td>\n",
              "      <td>440.000000</td>\n",
              "      <td>1.038980</td>\n",
              "      <td>3.820000</td>\n",
              "      <td>1.080000</td>\n",
              "      <td>14.200000</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       fixed acidity  volatile acidity  ...      alcohol      quality\n",
              "count    4898.000000       4898.000000  ...  4898.000000  4898.000000\n",
              "mean        6.854788          0.278241  ...    10.514267     5.877909\n",
              "std         0.843868          0.100795  ...     1.230621     0.885639\n",
              "min         3.800000          0.080000  ...     8.000000     3.000000\n",
              "25%         6.300000          0.210000  ...     9.500000     5.000000\n",
              "50%         6.800000          0.260000  ...    10.400000     6.000000\n",
              "75%         7.300000          0.320000  ...    11.400000     6.000000\n",
              "max        14.200000          1.100000  ...    14.200000     9.000000\n",
              "\n",
              "[8 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hNZD8Fm5AaOY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "outputId": "e921e8cf-45b4-4bee-e664-39d0d21c8b3a"
      },
      "source": [
        "df_white.isnull().sum()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "fixed acidity           0\n",
              "volatile acidity        0\n",
              "citric acid             0\n",
              "residual sugar          0\n",
              "chlorides               0\n",
              "free sulfur dioxide     0\n",
              "total sulfur dioxide    0\n",
              "density                 0\n",
              "pH                      0\n",
              "sulphates               0\n",
              "alcohol                 0\n",
              "quality                 0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rdFnYcORBr_x",
        "colab_type": "text"
      },
      "source": [
        "# ***There were already headers, but needed to change separator to \";\".  There's no specific order to the instances.  The number of rows of the WHITE wine matches UCI's description (4898), but UCI doesn't say how many RED wine instances there were.  No missing values in either one.***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mq_aQjxlM-u5",
        "colab_type": "text"
      },
      "source": [
        "## 3) Make Crosstabs of the Categorical Variables\n",
        "\n",
        "Take whichever of the above datasets has more categorical variables and use crosstabs to tabulate the different instances of the categorical variables.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DvMMCYMGIjzZ",
        "colab_type": "text"
      },
      "source": [
        "#***None of the datasets I chose have categorical variables.  I'll upload a dataset with categorical variables so that I can make a crosstab table.***"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_gWRZBnzJGTZ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        },
        "outputId": "cb26f3b3-e9da-47b9-bed1-0ddb1e208cb0"
      },
      "source": [
        "df_bank = pd.read_csv('bank-additional.csv', sep=';')\n",
        "df_bank"
      ],
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>month</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>emp.var.rate</th>\n",
              "      <th>cons.price.idx</th>\n",
              "      <th>cons.conf.idx</th>\n",
              "      <th>euribor3m</th>\n",
              "      <th>nr.employed</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>30</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>basic.9y</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>may</td>\n",
              "      <td>fri</td>\n",
              "      <td>487</td>\n",
              "      <td>2</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>-1.8</td>\n",
              "      <td>92.893</td>\n",
              "      <td>-46.2</td>\n",
              "      <td>1.313</td>\n",
              "      <td>5099.1</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>39</td>\n",
              "      <td>services</td>\n",
              "      <td>single</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>may</td>\n",
              "      <td>fri</td>\n",
              "      <td>346</td>\n",
              "      <td>4</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.1</td>\n",
              "      <td>93.994</td>\n",
              "      <td>-36.4</td>\n",
              "      <td>4.855</td>\n",
              "      <td>5191.0</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>jun</td>\n",
              "      <td>wed</td>\n",
              "      <td>227</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.4</td>\n",
              "      <td>94.465</td>\n",
              "      <td>-41.8</td>\n",
              "      <td>4.962</td>\n",
              "      <td>5228.1</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>38</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>basic.9y</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>unknown</td>\n",
              "      <td>telephone</td>\n",
              "      <td>jun</td>\n",
              "      <td>fri</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.4</td>\n",
              "      <td>94.465</td>\n",
              "      <td>-41.8</td>\n",
              "      <td>4.959</td>\n",
              "      <td>5228.1</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>47</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>university.degree</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>nov</td>\n",
              "      <td>mon</td>\n",
              "      <td>58</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>-0.1</td>\n",
              "      <td>93.200</td>\n",
              "      <td>-42.0</td>\n",
              "      <td>4.191</td>\n",
              "      <td>5195.8</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4114</th>\n",
              "      <td>30</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>basic.6y</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>cellular</td>\n",
              "      <td>jul</td>\n",
              "      <td>thu</td>\n",
              "      <td>53</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.4</td>\n",
              "      <td>93.918</td>\n",
              "      <td>-42.7</td>\n",
              "      <td>4.958</td>\n",
              "      <td>5228.1</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4115</th>\n",
              "      <td>39</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>jul</td>\n",
              "      <td>fri</td>\n",
              "      <td>219</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.4</td>\n",
              "      <td>93.918</td>\n",
              "      <td>-42.7</td>\n",
              "      <td>4.959</td>\n",
              "      <td>5228.1</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4116</th>\n",
              "      <td>27</td>\n",
              "      <td>student</td>\n",
              "      <td>single</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>may</td>\n",
              "      <td>mon</td>\n",
              "      <td>64</td>\n",
              "      <td>2</td>\n",
              "      <td>999</td>\n",
              "      <td>1</td>\n",
              "      <td>failure</td>\n",
              "      <td>-1.8</td>\n",
              "      <td>92.893</td>\n",
              "      <td>-46.2</td>\n",
              "      <td>1.354</td>\n",
              "      <td>5099.1</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4117</th>\n",
              "      <td>58</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>aug</td>\n",
              "      <td>fri</td>\n",
              "      <td>528</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>1.4</td>\n",
              "      <td>93.444</td>\n",
              "      <td>-36.1</td>\n",
              "      <td>4.966</td>\n",
              "      <td>5228.1</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4118</th>\n",
              "      <td>34</td>\n",
              "      <td>management</td>\n",
              "      <td>single</td>\n",
              "      <td>high.school</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>nov</td>\n",
              "      <td>wed</td>\n",
              "      <td>175</td>\n",
              "      <td>1</td>\n",
              "      <td>999</td>\n",
              "      <td>0</td>\n",
              "      <td>nonexistent</td>\n",
              "      <td>-0.1</td>\n",
              "      <td>93.200</td>\n",
              "      <td>-42.0</td>\n",
              "      <td>4.120</td>\n",
              "      <td>5195.8</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4119 rows × 21 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      age          job  marital  ... euribor3m nr.employed   y\n",
              "0      30  blue-collar  married  ...     1.313      5099.1  no\n",
              "1      39     services   single  ...     4.855      5191.0  no\n",
              "2      25     services  married  ...     4.962      5228.1  no\n",
              "3      38     services  married  ...     4.959      5228.1  no\n",
              "4      47       admin.  married  ...     4.191      5195.8  no\n",
              "...   ...          ...      ...  ...       ...         ...  ..\n",
              "4114   30       admin.  married  ...     4.958      5228.1  no\n",
              "4115   39       admin.  married  ...     4.959      5228.1  no\n",
              "4116   27      student   single  ...     1.354      5099.1  no\n",
              "4117   58       admin.  married  ...     4.966      5228.1  no\n",
              "4118   34   management   single  ...     4.120      5195.8  no\n",
              "\n",
              "[4119 rows x 21 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C-DtctUgZ5x5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 172
        },
        "outputId": "6e8bc04c-e2f8-445a-a33b-bd2df6108db0"
      },
      "source": [
        "df_bank['education'].value_counts()"
      ],
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "university.degree      1264\n",
              "high.school             921\n",
              "basic.9y                574\n",
              "professional.course     535\n",
              "basic.4y                429\n",
              "basic.6y                228\n",
              "unknown                 167\n",
              "illiterate                1\n",
              "Name: education, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cH4dxPR_JFlJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "20044c7a-d3e4-4784-8c25-9bfe046f4061"
      },
      "source": [
        "pd.crosstab(df_bank['age'],df_bank['marital'])"
      ],
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>marital</th>\n",
              "      <th>divorced</th>\n",
              "      <th>married</th>\n",
              "      <th>single</th>\n",
              "      <th>unknown</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>81</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>82</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>67 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "marital  divorced  married  single  unknown\n",
              "age                                        \n",
              "18              0        0       3        0\n",
              "19              0        0       1        0\n",
              "20              0        0       4        0\n",
              "21              0        1       6        0\n",
              "22              0        1       9        0\n",
              "..            ...      ...     ...      ...\n",
              "81              0        3       0        0\n",
              "82              1        1       0        0\n",
              "85              1        0       0        0\n",
              "86              0        2       0        0\n",
              "88              1        0       0        0\n",
              "\n",
              "[67 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aNb6YVtcXoC1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "624d5e9b-df84-44ec-f5e6-0ee876471ac2"
      },
      "source": [
        "pd.crosstab(df_bank['age'],df_bank['marital']).plot();"
      ],
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kATxCPpRXoLQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 130,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OElMYVaQXn7k",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 130,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OJ4t2IAk-6Vg",
        "colab_type": "text"
      },
      "source": [
        "## 4) Explore the distributions of the variables of the dataset using:\n",
        "- Histograms\n",
        "- Scatterplots\n",
        "- Density Plots"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DWb28QJtS33G",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "outputId": "32df8b88-6321-442f-a316-2684a39160a3"
      },
      "source": [
        "df_bank['age'].hist(bins=20);"
      ],
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "roN1NaBLTPTJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "outputId": "f05aacc1-cbfe-465a-b77e-bf9debbaaee9"
      },
      "source": [
        "df_bank.plot.scatter('age','marital')"
      ],
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f0c11d7d400>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 132
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TR6sPUJ8Topc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "outputId": "ca426444-67a4-497b-8560-ae197d9c4aa9"
      },
      "source": [
        "df_bank['age'].plot.density();"
      ],
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LXXTzpgp_N0q",
        "colab_type": "text"
      },
      "source": [
        "## 5) Create at least one visualization from a crosstab:\n",
        "\n",
        "Remember that a crosstab is just a dataframe and can be manipulated in the same way by row index, column, index, or column/row/cell position.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kBQKXHUa_VxM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "ef39fe7a-e513-4ebb-cdf5-687536fd2979"
      },
      "source": [
        "pd.crosstab(df_bank['age'],df_bank['marital']).plot();"
      ],
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MZCxTwKuReV9",
        "colab_type": "text"
      },
      "source": [
        "## Stretch Goals \n",
        "\n",
        "The following additional study tasks are optional, they are intended to give you an opportunity to stretch yourself beyond the main requirements of the assignment. You can pick and choose from the below, you do not need to complete them in any particular order.\n",
        "\n",
        "### - Practice Exploring other Datasets\n",
        "\n",
        "### -  Try using the Seaborn plotting library's \"Pairplot\" functionality in order to explore all of the possible histograms and scatterplots of your dataset all at once:\n",
        "\n",
        "[Seaborn Pairplot](https://seaborn.pydata.org/generated/seaborn.pairplot.html)\n",
        "\n",
        "### - Turn some of the continuous variables into categorical variables by binning the values using:\n",
        "- [pd.cut()](https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.cut.html)\n",
        "- [pd.qcut()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.qcut.html)\n",
        "- <https://stackoverflow.com/questions/30211923/what-is-the-difference-between-pandas-qcut-and-pandas-cut>\n",
        "\n",
        "And then use crosstabs to compare/visualize these binned variables against the other variables.\n",
        "\n",
        "\n",
        "### - Other types and sources of data\n",
        "Not all data comes in a nice single file - for example, image classification involves handling lots of image files. You still will probably want labels for them, so you may have tabular data in addition to the image blobs - and the images may be reduced in resolution and even fit in a regular csv as a bunch of numbers.\n",
        "\n",
        "If you're interested in natural language processing and analyzing text, that is another example where, while it can be put in a csv, you may end up loading much larger raw data and generating features that can then be thought of in a more standard tabular fashion.\n",
        "\n",
        "Overall you will in the course of learning data science deal with loading data in a variety of ways. Another common way to get data is from a database - most modern applications are backed by one or more databases, which you can query to get data to analyze. We'll cover this more in our data engineering unit.\n",
        "\n",
        "How does data get in the database? Most applications generate logs - text files with lots and lots of records of each use of the application. Databases are often populated based on these files, but in some situations you may directly analyze log files. The usual way to do this is with command line (Unix) tools - command lines are intimidating, so don't expect to learn them all at once, but depending on your interests it can be useful to practice.\n",
        "\n",
        "One last major source of data is APIs: https://github.com/toddmotto/public-apis\n",
        "\n",
        "API stands for Application Programming Interface, and while originally meant e.g. the way an application interfaced with the GUI or other aspects of an operating system, now it largely refers to online services that let you query and retrieve data. You can essentially think of most of them as \"somebody else's database\" - you have (usually limited) access.\n",
        "\n",
        "*Stretch goal* - research one of the above extended forms of data/data loading. See if you can get a basic example working in a notebook. Image, text, or (public) APIs are probably more tractable - databases are interesting, but there aren't many publicly accessible and they require a great deal of setup."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f4QP6--JBXNK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "outputId": "36a89c40-ba37-4409-f941-ec242c10b264"
      },
      "source": [
        "import seaborn as sns\n",
        "sns.set(style=\"ticks\", color_codes=True)\n",
        "\n",
        "df_bank2 = df_bank.drop(['default','housing','loan','contact','month','day_of_week','duration','campaign','pdays',\n",
        "                         'previous','poutcome','emp.var.rate','cons.price.idx','cons.conf.idx','euribor3m','nr.employed','y'],axis=1)\n",
        "sns.pairplot(df_bank2)\n",
        "\n",
        "# not sure why I'm not getting more graphs.  I left three or four variables in."
      ],
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7f0c0c0f7080>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 136
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAALYAAADCCAYAAADkQzjTAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAARYElEQVR4nO3de0xTd/8H8DfFFa/EgWCLVXEwO6Zxw8tYpohiuYhg0Qk4ROeIumyGLe7nBRQRvILm2XTYxTgz1ECccyiKEkTcpmGZl6mLOuNt4hBbEQVWkLJCe35/GPrQp1UKyunh288rMaGHw+Hd5O3hnPacT504juNACGNE9g5ASFegYhMmUbEJk6jYhElUbMIkKjZhEi/FzsrKQnBwMORyOW7evGl1HYPBgIyMDCgUCoSEhODAgQN8RCOM4qXYU6ZMQV5eHgYNGvTMdQoLC1FRUYGSkhLs378f2dnZqKys5CMeYRAvxR47diykUulz1ykqKkJMTAxEIhHc3NygUChQXFzMRzzCoB72DtBKo9HAy8vL9FgqleLBgwdW19VqtdBqtWbLDAYDdDodfH190aOHYJ4WsZNu2YA9e/Zg+/btVr938uRJyGQynhMRoRFMsaVSKdRqNUaNGgXAcg/e1ocffogZM2aYLXvw4AHmzJnT5TlJ9yCYYoeHh+PAgQMIDQ1FXV0dSktLkZeXZ3VdV1dXuLq68pyQdCe8nDyuX78eEydOxIMHD/DRRx9h2rRpAICFCxfiypUrAAClUgmZTIbQ0FDExsZi8eLFGDx4MB/xCIOcWLlstbKyElOmTKFjbAKA3nkkjKJivwB9s6FL1yedJ5iTx+5I/Iozov7vsM3rF/5H2YVpSFu0xyZMomITJlGxCZOo2IRJVGzCJCo2YRIVmzCJik2YRMUmTKJiEyZRsQmTqNiESVRswiQqNmESFZswiYpNmMTbjQbl5eVITk5GXV0d+vfvj6ysLHh7e5ut8/jxY6SkpECj0aClpQUBAQFITU2lATikw3jbY69Zswbx8fE4fvw44uPjkZaWZrHOjh074OPjg8LCQhw5cgR//vknSkpK+IpIGMJLsR8/foxr164hMjISABAZGYlr166hpqbGbD0nJyc8efIERqMRer0ezc3NGDhwIB8RCWN4+Ruv0WgwcOBAODs7AwCcnZ3h6ekJjUYDNzc303qffvopkpKSMGHCBOh0OsyZMwdjxoyx2J612X3PmvNHHJOgDl6Li4shl8uxZ88ePHnyBAsXLkRxcTHCw8PN1nve7D5CAJ6KLZVKUVVVBYPBAGdnZxgMBjx8+NBitHBubi42btwIkUiEfv36ITg4GGfPnrUoNs3uI+3h5Rjb3d0dfn5+OHr0KADg6NGj8PPzMzsMAQCZTIbTp08DAPR6PX777Te8/vrrFttzdXWFTCYz+yeRSLr+iZBug7dXRdLT05Gbm4uwsDDk5uYiIyMDgPn8vpUrV+LChQuIiopCdHQ0vL29ERsby1dEwhDejrF9fHysfq7Mt99+a/p6yJAhyMnJ4SsSYRi980iYRMUmTKJiEyZRsQmTqNiESVRswiQqNmESFZswiYpNmETFJkyiYhMmUbEJk6jYhElUbMIkKvb/oA8ZZYOg7nkUgo58KCl9IKlw0R6bRx35a0B/OV4M7bF5RH8N+EN7bMIk3opdXl6OuLg4hIWFIS4uDnfv3rW6XlFREaKiohAZGYmoqCg8evSIr4iEIbwdirTO7lMqlTh8+DDS0tKwd+9es3WuXLmC7du3Y8+ePfDw8EB9fT3EYjFfEQlDBDW7b/fu3UhMTISHhwcAoF+/fnBxceEjImGMoGb3/fXXX5DJZJgzZw4aGxsREhKCTz75BE5OTmbbo9l9pD2CelXEYDDgxo0byMnJgV6vx4IFC+Dl5YXo6Giz9Wh2H2mPoGb3eXl5ITw8HGKxGGKxGFOmTMHly5ctik2z+0h7BDW7LzIyEmVlZeA4Ds3NzThz5gzeeOMNi+3R7D7SHkHN7ps2bRrc3d0RERGB6Oho+Pr6YtasWXxFJAwR1Ow+kUiElJQUpKSk8BWLMMrmPTbHcfjhhx8wb948REVFAQDOnz+PoqKiLgtHSGfZXOxt27bhxx9/RFxcHDQaDQBAIpFg165dXRaOkM6yudiHDh3Cjh07MG3aNNPryjKZDPfu3euycIR0ls3FNhgM6NOnDwCYiv3kyRP07t27a5IR8gJsLnZQUBA2bdoEvV4P4Okx97Zt2zB58uQuC0dIZ9lc7JSUFFRXV2PMmDGor6+Hv78/1Go1li5d2pX5COkUm1/u69u3L1QqFR49egS1Wg2pVGq6WIkQobG52EajEQDg5uZmesfQaDRCJKJ7FYjw2FzsN9980+IqO+C/V+qFhoYiKSnJdIJJiD3ZXOzVq1ejtLQUixYtgkQigUajwa5duxAUFIRhw4ZBpVJh48aN2LBhQ1fmdRj6ZgPErzi/9HUdhc3FzsnJwaFDh9CvXz8AwLBhwzBy5EjMnDkTpaWlkMvlmDlzZpcFdTR04++LsfkAuaGhATqdzmyZTqdDfX09AGDAgAFoamp6uekI6SSb99jR0dFITEzEvHnzIJFIUFVVhb1795quiy4rK8OwYcO6LCghHWFzsZcvX46hQ4fi2LFjePjwITw9PREfH4+4uDgAwLvvvouAgIAuC0pIR9hcbJFIhJCQEHh6eqK2tta0/ODBg5g1axbddEsExeZil5aWYtmyZRg6dChu374NX19f3Lp1C6NHj6abAYjg2FzsrVu3YuPGjZg6dSrGjRuHgoIC5Ofn4/bt212Zj5BOsflVEbVajalTp5otmzFjBgoKCl56KEJelM3Fdnd3N40bGzRoEC5duoSKigrTW+2ECInNxY6JicGFCxcAAPPnz8e8efOgVCrxwQcf2PTzts7uA4A7d+7grbfeQlZWlq3xCDFj8zH2okWLTF9HR0fjnXfegU6ng4+Pj00/b8vsPuDpDQ1r1qyBQqGwNRohFjp9aZ6Xl5fNpbZ1dh8A7Ny5E5MmTYK3t3dnoxHCz1yR583ua+v69esoKyvD/Pnzn7s9rVaLyspKs380u4+0JZjZfc3NzVi9ejU2bdpk+g/wLDS7j7RHMLP7qqurUVFRYTqW12q14DgODQ0NWLdundn2aHafObrE1RIvxW47u0+pVFqd3efl5YWzZ8+aHmdnZ6OxsRErVqyw2J6rqytcXV35iN4t0CWulgQ1u4+Ql0VQs/vaSkpK6upIhGF0Jy5hEhWbMImKTZhExSZMomITJlGxCZOo2IRJVGzCJCo2YRIVmzCJik2YRMUmTKJiEyZRsQmTqNiESVRswiQqNmESFZswiYpNmMTbPY/l5eVITk5GXV0d+vfvj6ysLItpTyqVCkVFRRCJRHjllVewZMkSBAYG8hWRMIS3Ytsyu2/UqFFITExEr169cP36dSQkJKCsrAw9e/bkKyZhBC+HIrbO7gsMDESvXr0AAHK5HBzHoa6uzmJ7NOKMtIeXPfbzZve1HZrTVkFBAYYMGQKJRGLxPRpxRtojmNl9bZ07dw7btm3Dd999Z/X7NOKMtEcws/taXbp0CcuWLcM333yD1157zer2aMQZaQ8vx9htZ/cBsDq7DwAuX76MJUuW4Ouvv8aIESP4iEYYJajZfRkZGWhqakJaWhqUSiWUSiVu3LjBV0TCEEHN7svPz+crDmEcvfNImETFJkyiYhMmUbEJk6jYhElUbMIkKjZhEhWbMImKTZhExSZMomITJjlEsfXNBntHIDwT5I0GLxt9JLPjcYg9NnE8VGzCJCq2g+no+UZ3PT9xiGNs8l8dOd8Auu85B+2xCZOo2IRJvBW7vLwccXFxCAsLQ1xcHO7evWuxjsFgQEZGBhQKBUJCQqzeI0mILXgrduvsvuPHjyM+Ph5paWkW6xQWFqKiogIlJSXYv38/srOzUVlZyVdEYkVHTh7/7cC6XX1SysvJY+vsvpycHABPZ/etW7cONTU1ZrNFioqKEBMTA5FIBDc3NygUChQXF2PBggVm29NqtdBqtWbL7t+/DwBWZ/jJZLKX/ZQcRkff3LJ13fzMSJsz6Jr0ePzoodXvSSQS9OhhWWMnjuM4m39DJ129ehUrVqzAsWPHTMsiIiKwZcsWs8E4UVFR2LBhA0aNGgXg6WiGqqoqpKammm0vOzubZvcRAMDJkyet7ri65ct91mb36fV63Lt3D97e3qbhlx3VOv8vLy/P6jBMe6N8lp71ewQ1u08qlUKtVpv22BqNBl5eXhbbe9bsvmfN+usoiUQi6MMXytc+Qc3uCw8Px4EDB2A0GlFTU4PS0lKEhYXxEZEwRlCz+5RKJWQyGUJDQxEbG4vFixdj8ODBfEUkDBHU7D5nZ2dT4Ql5Ec7p6enp9g4hJC4uLggICICLi4u9o1hF+WzDy8t9hPCNrhUhTKJiEyZ1yzdoXoba2losX74cFRUVEIvFGDp0KNauXQs3NzfI5XIMHz4cItHT//ebN2+GXC7nPWNwcDDEYrHpeHXp0qUIDAzEH3/8gbS0NPz7778YNGgQtmzZAnd3d16zVVZWYvHixabH9fX1aGhowLlz556Zm1ecg6qtreXOnDljepyZmcmlpKRwHMdxw4cP5xoaGuwVzWTy5MncjRs3zJYZDAZOoVBw58+f5ziO41QqFZecnGyPeGbWr1/PZWRkcBxnPTffHPZQpH///ggICDA9fvvtt6FWq+2YyDZXr16Fi4sLxo4dCwCYPXs2iouL7ZpJr9ejsLAQ77//vl1ztOWwhyJtGY1G7Nu3D8HBwaZlc+fOhcFgwMSJE5GUlASxWGyXbEuXLgXHcRgzZgy++OILi8sM3NzcYDQaTZ9Rbw8//fQTBg4caHZB2//m5vvjCx12j93WunXr0Lt3byQkJAAAfvnlFxw8eBB5eXm4ffs2VCqVXXLl5eXhyJEjyM/PB8dxWLt2rV1ytCc/P99sby2E3A5f7KysLPz999/YunWr6WSx9eKsvn37IiYmBhcvXrRLttYcYrEY8fHxuHjxoulCsVY1NTUQiUR221tXVVXh/PnziIqKMi2zlptvDl3sL7/8ElevXoVKpTIdavzzzz9oamoCALS0tOD48ePw8/PjPVtjYyPq6+sBABzHoaioCH5+fhg5ciSamprw+++/AwC+//57hIeH856v1aFDhxAUFIRXX331ubn55rDvPN66dQuRkZHw9vZGz549ATy902bBggVIS0uDk5MTWlpa4O/vj5UrV6JPnz685rt37x6SkpJgMBhgNBrh4+OD1NRUeHp64uLFi1izZo3Zy30DBgzgNV+rsLAwrFq1ChMnTmw3N58cttiEbQ59KELYRcUmTKJiEyZRsQmTqNiESVRswiQqNmESFZswiYotcDt37oRCoYC/vz8iIiJw4sQJAE8n02ZmZiIgIADBwcHIzc2FXC5HS0sLgKcX/q9cuRITJkxAYGAgvvrqKxgM3fPTCTqDLlsVuMGDByMvLw8eHh4oLi7GsmXLUFJSgpMnT+L06dM4fPgwevXqhc8//9zs55KTk+Hu7o6SkhLodDp8/PHHkEqlmD17tp2eCc/sdYcD6Zzp06dzJ06c4ObOncvt27fPtPzXX3/lhg8fzjU3N3PV1dXciBEjOJ1OZ/p+YWEhl5CQYI/IdkF7bIErKChATk6OaUxyY2MjamtrLWYfth3OqFar0dLSggkTJpiWGY1Gi1mJLKNiC9j9+/eRmpqK3bt3w9/fH87OzlAqn37YkYeHh9ks8LZfSyQSiMVinDlzxursaEdAJ48CptPp4OTkZBremZ+fj1u3bgEApk6dir1796KqqgpardZsVJynpyfGjx+PzMxMNDQ0wGg0oqKiAufOnbPL87AHKraA+fr6IjExEbNnz8Z7772HmzdvYvTo0QCA2NhYjB8/HtOnT0d0dDSCgoLQo0cP02zwzZs3o7m5GRERERg3bhw+++wzVFdX2/Pp8Iqux2bEqVOnkJ6ejp9//tneUQSB9tjdVFNTE06dOoWWlhZUVVVBpVJBoVDYO5Zg0B67m9LpdEhISMCdO3fQs2dPTJo0CatWrULfvn3tHU0QqNiESXQoQphExSZMomITJlGxCZOo2IRJVGzCpP8HFHv/05zdNcsAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 180x180 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B_WqaTUpi9oj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}